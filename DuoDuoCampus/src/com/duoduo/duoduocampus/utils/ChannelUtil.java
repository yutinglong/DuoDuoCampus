package com.duoduo.duoduocampus.utils;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.HashMap;import java.util.List;import java.util.Map;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.content.pm.ResolveInfo;import android.net.Uri;import android.preference.PreferenceManager;import android.text.TextUtils;/** *  * @title: 渠道号辅助工具类 * @description: * @company: 多多校园 * @author yutinglong * @version 1.0.0 */public class ChannelUtil {	private static final String TAG = "ChannelUtil";	private static final String CHANNEL_KEY = "CHANNEL_KEY";	private static final String CHANNEL_VERSION_KEY = "CHANNEL_VERSION_KEY";	private static String mChannel;	private static Map<String, String> mQudaoMap = new HashMap<String, String>();	static {		mQudaoMap.put("10001", "com.tencent.android.qqdownloader");// 腾讯应用宝		mQudaoMap.put("10002", "cn.goapk.market");// 安智市场		mQudaoMap.put("10003", "com.baidu.appsearch");// 百度应用市场		mQudaoMap.put("10004", "com.wandoujia.phoenix2");// 豌豆荚		mQudaoMap.put("10005", "com.dragon.android.pandaspace");// 91助手		mQudaoMap.put("10006", "com.qihoo.appstore");// 360手机助手		mQudaoMap.put("10007", "com.xiaomi.market");// 小米市场		mQudaoMap.put("10008", "com.nduoa.nmarket");// N多市场		mQudaoMap.put("10009", "com.yingyonghui.market");// 应用汇	}		public static int getVersionCode(Context context) {		try {			return context.getPackageManager().getPackageInfo(					context.getPackageName(), PackageManager.GET_CONFIGURATIONS).versionCode;		} catch (NameNotFoundException e) {			e.printStackTrace();		}		return -1;	}		public static String getVersionName(Context context) {		try {			return context.getPackageManager().getPackageInfo(					context.getPackageName(), PackageManager.GET_CONFIGURATIONS).versionName;		} catch (NameNotFoundException e) {			e.printStackTrace();		}		return "0.0.0";	}		/**	 * 检测手机是否安装过市场软件	 * 	 * @param context	 * @return	 */	public static boolean existsMarket(Context context) {		Intent marketIntent = new Intent(Intent.ACTION_VIEW);		marketIntent.setData(Uri.parse("market://details?id="				+ context.getPackageName()));		final PackageManager packageManager = context.getPackageManager();		List<ResolveInfo> list = packageManager.queryIntentActivities(				marketIntent, PackageManager.GET_ACTIVITIES);		return list == null ? false : list.size() > 0;	}	/**	 * 打开市场去评论	 * 	 * @param context	 */	public static void openMarketForReviews(Context context) {		String title = "请选择应用市场";		try {			Intent marketIntent = new Intent(Intent.ACTION_VIEW);			marketIntent.setData(Uri.parse("market://details?id="					+ context.getPackageName()));			String channelCode = getChannel(context, Constants.DEFAULT_CHANNEL);			if (mQudaoMap.containsKey(channelCode)) {				marketIntent.setPackage(mQudaoMap.get(channelCode));			} else {				marketIntent = Intent.createChooser(marketIntent, title);			}			context.startActivity(marketIntent);		} catch (Exception e) {			try {				Intent marketIntent = new Intent(Intent.ACTION_VIEW);				marketIntent.setData(Uri.parse("market://details?id="						+ context.getPackageName()));				marketIntent = Intent.createChooser(marketIntent, title);				context.startActivity(marketIntent);			} catch (Exception e2) {			}		}	}	public static String getChannel(Context context, String defaultChannel) {		if (!TextUtils.isEmpty(mChannel)) {			return mChannel;		}		mChannel = getChannelBySharedPreferences(context, defaultChannel);		if (!TextUtils.isEmpty(mChannel)) {			return mChannel;		}		mChannel = getChannelFromApk(context);		if (TextUtils.isEmpty(mChannel)) {			mChannel = defaultChannel;		}		saveChannelBySharedPreferences(context, mChannel);		return mChannel;	}	private static void saveChannelBySharedPreferences(Context context,			String channel) {		LogUtil.d(TAG, "saveChannelBySharedPreferences...");		SharedPreferences sp = PreferenceManager				.getDefaultSharedPreferences(context);		Editor editor = sp.edit();		editor.putString(CHANNEL_KEY, channel);		editor.putInt(CHANNEL_VERSION_KEY, getVersionCode(context));		editor.commit();	}	private static String getChannelBySharedPreferences(Context context, String defaultChannel) {		LogUtil.d(TAG, "getChannelBySharedPreferences...");		SharedPreferences sp = PreferenceManager				.getDefaultSharedPreferences(context);		int currentVersionCode = getVersionCode(context);		if (currentVersionCode == -1) {			//获取版本号异常,返回默认的渠道号			return defaultChannel;		}		int versionCodeSaved = sp.getInt(CHANNEL_VERSION_KEY, -1);		if (versionCodeSaved == -1) {			// 本地没有存储的channel对应的版本号			// 第一次使用 或者 原先存储版本号异常			// 此时需要从apk里读取			return "";		}		if (currentVersionCode != versionCodeSaved) {			// 版本不一致,可能是升级了版本,此时需要从apk里重新读取			return "";		}		return sp.getString(CHANNEL_KEY, "");	}	private static String getChannelFromApk(Context context) {		LogUtil.d(TAG, "getChannelFromApk...");				String channel = null;				channel = getFromAssets(context, "channel");		if ("".equals(channel)) {			channel = "unknown";		}				return channel.trim();	}	private static String getFromAssets(Context cx, String fileName) {		StringBuilder builder = new StringBuilder();				InputStreamReader isReader = null;		BufferedReader bufferedReader = null;		try {			if(cx!=null){				isReader = new InputStreamReader(cx.getResources().getAssets().open(fileName));				bufferedReader = new BufferedReader(isReader);				String line = null;				while (null != (line = bufferedReader.readLine())) {					builder.append(line);				}			}		} catch (IOException e) {			builder.setLength(0);		} finally {			try {				if (null != isReader) {					isReader.close();				}								if (null != bufferedReader) {					bufferedReader.close();				}			} catch (IOException e) {				builder.setLength(0);			}		}		return builder.toString();	}}